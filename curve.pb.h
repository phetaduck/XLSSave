// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: curve.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_curve_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_curve_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_curve_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_curve_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_curve_2eproto;
namespace LAS2XLS {
class Curve;
class CurveDefaultTypeInternal;
extern CurveDefaultTypeInternal _Curve_default_instance_;
class Curves;
class CurvesDefaultTypeInternal;
extern CurvesDefaultTypeInternal _Curves_default_instance_;
}  // namespace LAS2XLS
PROTOBUF_NAMESPACE_OPEN
template<> ::LAS2XLS::Curve* Arena::CreateMaybeMessage<::LAS2XLS::Curve>(Arena*);
template<> ::LAS2XLS::Curves* Arena::CreateMaybeMessage<::LAS2XLS::Curves>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LAS2XLS {

// ===================================================================

class Curve :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LAS2XLS.Curve) */ {
 public:
  Curve();
  virtual ~Curve();

  Curve(const Curve& from);
  Curve(Curve&& from) noexcept
    : Curve() {
    *this = ::std::move(from);
  }

  inline Curve& operator=(const Curve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Curve& operator=(Curve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Curve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Curve* internal_default_instance() {
    return reinterpret_cast<const Curve*>(
               &_Curve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Curve& a, Curve& b) {
    a.Swap(&b);
  }
  inline void Swap(Curve* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Curve* New() const final {
    return CreateMaybeMessage<Curve>(nullptr);
  }

  Curve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Curve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Curve& from);
  void MergeFrom(const Curve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LAS2XLS.Curve";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_curve_2eproto);
    return ::descriptor_table_curve_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMValuesFieldNumber = 2,
    kMNameFieldNumber = 1,
  };
  // repeated string m_values = 2;
  int m_values_size() const;
  private:
  int _internal_m_values_size() const;
  public:
  void clear_m_values();
  const std::string& m_values(int index) const;
  std::string* mutable_m_values(int index);
  void set_m_values(int index, const std::string& value);
  void set_m_values(int index, std::string&& value);
  void set_m_values(int index, const char* value);
  void set_m_values(int index, const char* value, size_t size);
  std::string* add_m_values();
  void add_m_values(const std::string& value);
  void add_m_values(std::string&& value);
  void add_m_values(const char* value);
  void add_m_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& m_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_m_values();
  private:
  const std::string& _internal_m_values(int index) const;
  std::string* _internal_add_m_values();
  public:

  // required string m_name = 1;
  bool has_m_name() const;
  private:
  bool _internal_has_m_name() const;
  public:
  void clear_m_name();
  const std::string& m_name() const;
  void set_m_name(const std::string& value);
  void set_m_name(std::string&& value);
  void set_m_name(const char* value);
  void set_m_name(const char* value, size_t size);
  std::string* mutable_m_name();
  std::string* release_m_name();
  void set_allocated_m_name(std::string* m_name);
  private:
  const std::string& _internal_m_name() const;
  void _internal_set_m_name(const std::string& value);
  std::string* _internal_mutable_m_name();
  public:

  // @@protoc_insertion_point(class_scope:LAS2XLS.Curve)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> m_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr m_name_;
  friend struct ::TableStruct_curve_2eproto;
};
// -------------------------------------------------------------------

class Curves :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LAS2XLS.Curves) */ {
 public:
  Curves();
  virtual ~Curves();

  Curves(const Curves& from);
  Curves(Curves&& from) noexcept
    : Curves() {
    *this = ::std::move(from);
  }

  inline Curves& operator=(const Curves& from) {
    CopyFrom(from);
    return *this;
  }
  inline Curves& operator=(Curves&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Curves& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Curves* internal_default_instance() {
    return reinterpret_cast<const Curves*>(
               &_Curves_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Curves& a, Curves& b) {
    a.Swap(&b);
  }
  inline void Swap(Curves* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Curves* New() const final {
    return CreateMaybeMessage<Curves>(nullptr);
  }

  Curves* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Curves>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Curves& from);
  void MergeFrom(const Curves& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Curves* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LAS2XLS.Curves";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_curve_2eproto);
    return ::descriptor_table_curve_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurvesFieldNumber = 1,
  };
  // repeated .LAS2XLS.Curve curves = 1;
  int curves_size() const;
  private:
  int _internal_curves_size() const;
  public:
  void clear_curves();
  ::LAS2XLS::Curve* mutable_curves(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LAS2XLS::Curve >*
      mutable_curves();
  private:
  const ::LAS2XLS::Curve& _internal_curves(int index) const;
  ::LAS2XLS::Curve* _internal_add_curves();
  public:
  const ::LAS2XLS::Curve& curves(int index) const;
  ::LAS2XLS::Curve* add_curves();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LAS2XLS::Curve >&
      curves() const;

  // @@protoc_insertion_point(class_scope:LAS2XLS.Curves)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LAS2XLS::Curve > curves_;
  friend struct ::TableStruct_curve_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Curve

// required string m_name = 1;
inline bool Curve::_internal_has_m_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Curve::has_m_name() const {
  return _internal_has_m_name();
}
inline void Curve::clear_m_name() {
  m_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Curve::m_name() const {
  // @@protoc_insertion_point(field_get:LAS2XLS.Curve.m_name)
  return _internal_m_name();
}
inline void Curve::set_m_name(const std::string& value) {
  _internal_set_m_name(value);
  // @@protoc_insertion_point(field_set:LAS2XLS.Curve.m_name)
}
inline std::string* Curve::mutable_m_name() {
  // @@protoc_insertion_point(field_mutable:LAS2XLS.Curve.m_name)
  return _internal_mutable_m_name();
}
inline const std::string& Curve::_internal_m_name() const {
  return m_name_.GetNoArena();
}
inline void Curve::_internal_set_m_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Curve::set_m_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LAS2XLS.Curve.m_name)
}
inline void Curve::set_m_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  m_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LAS2XLS.Curve.m_name)
}
inline void Curve::set_m_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  m_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LAS2XLS.Curve.m_name)
}
inline std::string* Curve::_internal_mutable_m_name() {
  _has_bits_[0] |= 0x00000001u;
  return m_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Curve::release_m_name() {
  // @@protoc_insertion_point(field_release:LAS2XLS.Curve.m_name)
  if (!_internal_has_m_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return m_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Curve::set_allocated_m_name(std::string* m_name) {
  if (m_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  m_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), m_name);
  // @@protoc_insertion_point(field_set_allocated:LAS2XLS.Curve.m_name)
}

// repeated string m_values = 2;
inline int Curve::_internal_m_values_size() const {
  return m_values_.size();
}
inline int Curve::m_values_size() const {
  return _internal_m_values_size();
}
inline void Curve::clear_m_values() {
  m_values_.Clear();
}
inline std::string* Curve::add_m_values() {
  // @@protoc_insertion_point(field_add_mutable:LAS2XLS.Curve.m_values)
  return _internal_add_m_values();
}
inline const std::string& Curve::_internal_m_values(int index) const {
  return m_values_.Get(index);
}
inline const std::string& Curve::m_values(int index) const {
  // @@protoc_insertion_point(field_get:LAS2XLS.Curve.m_values)
  return _internal_m_values(index);
}
inline std::string* Curve::mutable_m_values(int index) {
  // @@protoc_insertion_point(field_mutable:LAS2XLS.Curve.m_values)
  return m_values_.Mutable(index);
}
inline void Curve::set_m_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:LAS2XLS.Curve.m_values)
  m_values_.Mutable(index)->assign(value);
}
inline void Curve::set_m_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:LAS2XLS.Curve.m_values)
  m_values_.Mutable(index)->assign(std::move(value));
}
inline void Curve::set_m_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  m_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:LAS2XLS.Curve.m_values)
}
inline void Curve::set_m_values(int index, const char* value, size_t size) {
  m_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:LAS2XLS.Curve.m_values)
}
inline std::string* Curve::_internal_add_m_values() {
  return m_values_.Add();
}
inline void Curve::add_m_values(const std::string& value) {
  m_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:LAS2XLS.Curve.m_values)
}
inline void Curve::add_m_values(std::string&& value) {
  m_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:LAS2XLS.Curve.m_values)
}
inline void Curve::add_m_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  m_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:LAS2XLS.Curve.m_values)
}
inline void Curve::add_m_values(const char* value, size_t size) {
  m_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:LAS2XLS.Curve.m_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Curve::m_values() const {
  // @@protoc_insertion_point(field_list:LAS2XLS.Curve.m_values)
  return m_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Curve::mutable_m_values() {
  // @@protoc_insertion_point(field_mutable_list:LAS2XLS.Curve.m_values)
  return &m_values_;
}

// -------------------------------------------------------------------

// Curves

// repeated .LAS2XLS.Curve curves = 1;
inline int Curves::_internal_curves_size() const {
  return curves_.size();
}
inline int Curves::curves_size() const {
  return _internal_curves_size();
}
inline void Curves::clear_curves() {
  curves_.Clear();
}
inline ::LAS2XLS::Curve* Curves::mutable_curves(int index) {
  // @@protoc_insertion_point(field_mutable:LAS2XLS.Curves.curves)
  return curves_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LAS2XLS::Curve >*
Curves::mutable_curves() {
  // @@protoc_insertion_point(field_mutable_list:LAS2XLS.Curves.curves)
  return &curves_;
}
inline const ::LAS2XLS::Curve& Curves::_internal_curves(int index) const {
  return curves_.Get(index);
}
inline const ::LAS2XLS::Curve& Curves::curves(int index) const {
  // @@protoc_insertion_point(field_get:LAS2XLS.Curves.curves)
  return _internal_curves(index);
}
inline ::LAS2XLS::Curve* Curves::_internal_add_curves() {
  return curves_.Add();
}
inline ::LAS2XLS::Curve* Curves::add_curves() {
  // @@protoc_insertion_point(field_add:LAS2XLS.Curves.curves)
  return _internal_add_curves();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LAS2XLS::Curve >&
Curves::curves() const {
  // @@protoc_insertion_point(field_list:LAS2XLS.Curves.curves)
  return curves_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LAS2XLS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_curve_2eproto
